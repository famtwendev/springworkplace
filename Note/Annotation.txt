Bean là 1 đối tượng được quản lý bởi Spring Container
Được cấu hình bởi annotation @Component hoặc java code

====================================== ĐÁNH DẤU LÊN TRÊN CLASS ======================================

@Component: Annotation cơ bản để đánh dấu một lớp là một bean.

@Service: Annotation dành cho các lớp dịch vụ kinh doanh.

@Repository: Annotation dành cho các lớp truy cập dữ liệu.

@Controller: Annotation dành cho các lớp controller web.

@RestController: Annotation dành cho các lớp controller web RESTful.

@EnableAutoConfiguration: @SpringBootApplication: kết hợp một số chú thích khác như @Configuration, @EnableAutoConfiguration, và @ComponentScan. 
● Spring Boot sẽ quét các classpath để tìm các
dependency và cấu hình tự động phù hợp với
các dependency đó.
● Tự động cấu hình và cung cấp các bean (đối
tượng) cho ứng dụng của bạn mà không cần
phải cấu hình chi tiết từng phần riêng lẻ






@Primary: Được sử dụng để chỉ định rõ ràng một bean ưu tiên (primary bean) trong trường hợp có nhiều bean cùng kiểu dữ liệu. Khi mà ta không cần quan tâm cụ thể đến đối tượng được tạo ra.



@Scope - Bean Scope (Phạm vi của Bean) :quyết định 1 bean được tạo ra ntn và lưu trữ chia sẻ trong ứng dụng ?
Spring hỗ trợ các phạm vi bean sau:

● Singleton: Đây là phạm vi mặc định cho các bean trong Spring. Mỗi lần yêu cầu bean, container chỉ trả về một phiên bản duy nhất của bean đó.
● Prototype: Khi một bean được định với phạm vi prototype, mỗi lần yêu cầu bean, request sẽ tạo 1 phiên bản mới của bean đó.

● Request: Phạm vi request chỉ áp dụng cho các ứng dụng web. Mỗi lần 1 yêu cầu HTTP mới được tạo ra, Spring Container sẽ tạo ra 1 phiên bản mới của bean để phục vụ yêu cầu đó
● Session: Phạm vi session cũng áp dụng cho các ứng dụng web. Mỗi session sẽ có 1 phiên bản duy nhất của bean được tạo ra và chia sẻ trong suốt phiên đó
● Global Session: tương tự như phạm vi session. Tuy nhiên nó chỉ áp dụng trong các môi trường phân tán (distributed environment)
● Application: Chỉ áp dụng cho các ứng dụng web và tương tự như phạm vi singleton. Bean tạo ra 1 lần duy nhất và chia sẻ cho toàn bộ ứng dụng web. Tồn tại cho đến khi ứng dụng web bị dừng.
● WebSocket: áp dụng cho các ứng dụng sử dụng giao thức WebSocket sẽ có 1 phiên bản duy nhất của bean, và khi bean kết nối kết thúc, bean được hủy.
 


@Lazy 
Lazy Initialization: là một kỹ thuật được sd trong Spring để tạo ra các đối tượng bean chỉ khi cần thiết thay vì tạo all đối tượng bean ngay từ đầu khi ứng dụng khởi động
Cấu hình: + Cách 1: Đối với từng class thêm annotation @Lazy
	  + Cách 2: Cấu hình cho toàn bộ dự án tại file application.properties: 
		    spring.main.lazy-initialization=true
Lưu ý: Khi sử dụng trong @RestController, Bean sẽ không được tạo cho đến khi request được gọi



============================== ĐÁNH DẤU LÊN TRÊN PHƯƠNG THỨC =================================

@Autowired: Tự động tạo đối tượng và tiêm phụ thuộc



Bean Life Cycle (Vòng đời của bean)
https://www.geeksforgeeks.org/bean-life-cycle-in-java-spring/

@PostConstruct được đặt trước một phương thức trong một bean để chỉ rằng phương thức đó sẽ được gọi tự động sau khi bean được khởi tạo và trước khi nó được sử dụng. Dùng để thực hiện thao tác khởi tạo (init)

@PreDestroy : Được sử dụng để xác định phương thức sẽ được thực thi trước khi bean bị hủy bỏ. Dùng để thực hiện các thao tác dọn dẹp, giải phóng tài nguyên hoặc lưu trữ dữ liệu trước khi bean bị hủy. (save + clean)

Khi sử dụng "Prototype" => Spring không gọi phương thức Destroy 
Khi sử dụng "Prototype" => Không cần khai báo @Lazy






============================== ĐÁNH DẤU TRONG ĐỐI SỐ TRUYỀN VÀO ================================

@Qualifier: Được sử dụng để xác định rõ ràng bean cụ thể nào sẽ được sử dụng khi có nhiều bean cùng kiểu dự liệu trong ứng dụng 





@ComponentScan
● Cho phép quét các Component tại package hiện hành và
các sub-package


================================= JPA / Hibernate ==================================

@Entity - Entity Class 
● Được đánh dấu bằng @Entity
● Bắt buộc có một constructor rỗng (không có tham
số) (nếu Class không có bất kỳ constructor nào, thì
sẽ có một constructor rỗng mặc định)
● Class có thể có nhiều constructor

@Table(name=“xxxx”)
● Được đánh dấu bên dưới các @Entity
● Quy định tên của Table trong cơ sở dữ liệu


@Id : Khóa chính
@GeneratedValue(strategy = Generdation.Type.IDENTITY 




@Transactional



spring.application.name=hibernate

# Config Datasource
spring.datasource.url=jdbc:mysql://localhost:3307/QuanLySinhVien
spring.datasource.username=spring
spring.datasource.password=spring

# Config show banner
spring.main.banner-mode=off


# Config logging ( debug -> info -> warn -> error -> fatle) 
logging.level.root=warn 


#port
server.port=8888

#Actuator
management.endpoints.web.exposure.include=*

#user
spring.security.user.name=admin
spring.security.user.password=admin
spring.security.user.roles=ADMIN


#Cau hinh giao dien Thymeleaf
spring.thymeleaf.prefix=/WEB-INF/views/
spring.thymeleaf.suffix=.html

#Cau hinh gui emal
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=myemail@gmail.com
spring.mail.password=mypassword

#cau hinh logging
loggin.level.org.springframework-INFO
logging.level.com.example=DEBUG





